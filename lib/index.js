"use strict";
Object.defineProperties(exports, {
  I2C: {get: function() {
      return I2C;
    }},
  __esModule: {value: true}
});
var $__execSync__,
    $__raspi_45_peripheral__,
    $___46__46__47_build_47_Release_47_addon__;
var sh = ($__execSync__ = require("execSync"), $__execSync__ && $__execSync__.__esModule && $__execSync__ || {default: $__execSync__}).default;
var Peripheral = ($__raspi_45_peripheral__ = require("raspi-peripheral"), $__raspi_45_peripheral__ && $__raspi_45_peripheral__.__esModule && $__raspi_45_peripheral__ || {default: $__raspi_45_peripheral__}).Peripheral;
var addon = ($___46__46__47_build_47_Release_47_addon__ = require("../build/Release/addon"), $___46__46__47_build_47_Release_47_addon__ && $___46__46__47_build_47_Release_47_addon__.__esModule && $___46__46__47_build_47_Release_47_addon__ || {default: $___46__46__47_build_47_Release_47_addon__}).default;
var I2C = function I2C(address, baudRate) {
  $traceurRuntime.superCall(this, $I2C.prototype, "constructor", [['SDA', 'SCL']]);
  if (baudRate) {
    if (typeof baudRate != number || baudRate % 1000 != 0) {
      throw new Error('Invalid I2C baud rate. Baud rates must be a multiple of 1000');
    }
    sh.run('gpio load i2c ' + baudRate);
  } else {
    sh.run('gpio load i2c');
  }
  this.address = address;
  this.fd = addon.init(this.address);
};
var $I2C = I2C;
($traceurRuntime.createClass)(I2C, {
  read: function() {
    if (!this.alive) {
      throw new Error('Attempted to read from a destroyed peripheral');
    }
    return addon.read();
  },
  readReg8: function() {
    if (!this.alive) {
      throw new Error('Attempted to read from a destroyed peripheral');
    }
    return addon.readReg8();
  },
  readReg16: function() {
    if (!this.alive) {
      throw new Error('Attempted to read from a destroyed peripheral');
    }
    return addon.readReg16();
  },
  write: function(value) {
    if (!this.alive) {
      throw new Error('Attempted to write to a destroyed peripheral');
    }
    addon.write(value);
  },
  writeReg8: function(value) {
    if (!this.alive) {
      throw new Error('Attempted to write to a destroyed peripheral');
    }
    addon.writeReg8(value);
  },
  writeReg16: function(value) {
    if (!this.alive) {
      throw new Error('Attempted to write to a destroyed peripheral');
    }
    addon.writeReg16(value);
  }
}, {}, Peripheral);

//# sourceMappingURL=data:application/json;base64,